name: CI

on:
  push:
    branches: [ "developer" ]
  pull_request:
    branches: [ "developer" ]

jobs:
  CI:

    runs-on: ubuntu-latest

    steps:
    
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restaurando dependências
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore
      
    - name: Executando teste unitários
      run: dotnet test --no-build --filter "Categoria=Unidade"

    - name: Executando teste integração
      run: dotnet test --filter "Categoria=Integração" --verbosity detailed --logger "console;verbosity=detailed" --diag:log.txt
    
    - name: Pegar versão do git
      id: vars
      run: |
        TAG=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
        echo "TAG=$TAG" >> $GITHUB_ENV
        VERSION=$(echo $TAG | sed 's/^v//')
        IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEW_VERSION="$MAJOR.$MINOR.$((PATCH+1))"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "NEW_TAG=v$NEW_VERSION" >> $GITHUB_ENV
        
    - name: Debug versão
      run: echo "Nova versão:${{ env.NEW_VERSION }}"
      
    - name: Login no docker hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build e push da imagem
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true        
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/api-tech-challenge:${{ env.NEW_VERSION }}
          ${{ secrets.DOCKERHUB_USERNAME }}/api-tech-challenge:latest

    - name: Saindo do Docker Hub
      run: docker logout
